#+title: 有效的字母异位词

* 242. 有效的字母异位词

#+begin_src go :main no
  package main

  import "fmt"

  func main() {
      fmt.Println(isAnagram("rat", "car"))
  }

  func isAnagram(s string, t string) bool {
      if len(s) != len(t) {
          return false
      }

      var check = make(map[rune]int)

      for _, ch := range s {
          check[ch]++
      }

      for _, ch := range t {
          check[ch]--

          if check[ch] < 0 {
              return false
          }
      }

      return true
  }
#+end_src

#+RESULTS:
: false

* 383. 赎金信

#+begin_src go :main no
  package main

  import "fmt"

  func main() {
      fmt.Println(canConstruct("aa", "aab"))
  }

  func canConstruct(ransomNote string, magazine string) bool {
      if len(ransomNote) > len(magazine) {
          return false
      }

      var cnt = [26]int{}

      for _, ch := range magazine {
          cnt[ch-'a']++
      }

      for _, ch := range ransomNote {
          cnt[ch-'a']--

          if cnt[ch-'a'] < 0 {
              return false
          }
      }

      return true
  }
#+end_src

#+RESULTS:
: true

* 49. 字母异位词分组

#+begin_src go :main no
  package main

  import "fmt"

  func main() {
      fmt.Println(groupAnagrams([]string{"eat", "tea", "tan", "ate", "nat", "bat"}))
  }

  func groupAnagrams(strs []string) [][]string {

      mp := map[[26]int][]string{}

      for _, st := range strs {
          cnt := [26]int{}

          for _, ch := range st {
              cnt[ch-'a']++
          }

          mp[cnt] = append(mp[cnt], st)
      }

      ans := make([][]string, 0, len(mp))
      for _, c := range mp {
          ans = append(ans, c)
      }

      return ans
  }
#+end_src

#+RESULTS:
: [[eat tea ate] [tan nat] [bat]]
