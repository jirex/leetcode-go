#+title: 双指针

* 21.合并两个有序链表

#+begin_src go
  func mergeTwoLists(list1 *ListNode, list2 *ListNode) *ListNode {
      var dummy = &ListNode{}

      p := dummy

      for list1 != nil && list2 != nil {

          if list1.Val < list2.Val {
              p.Next = list1
              list1 = list1.Next
          } else {
              p.Next = list2
              list2 = list2.Next
          }
          p = p.Next
      }

      if list1 != nil {
          p.Next = list1
      }

      if list2 != nil {
          p.Next = list2
      }

      return dummy.Next
  }
#+end_src

* 23.合并K个升序链表

#+begin_src go
  type ListNodes []*ListNode

  func (l ListNodes) Len() int {
      return len(l)
  }

  func (l ListNodes) Less(i, j int) bool {
      return l[i].Val <= l[j].Val
  }

  func (l ListNodes) Swap(i, j int) {
      l[i], l[j] = l[j], l[i]
  }

  func (l *ListNodes) Pop() interface{} {
      n := len(*l)
      x := (*l)[n-1]
      ,*l = (*l)[:n-1]
      return x
  }

  func (l *ListNodes) Push(x interface{}) {
      ,*l = append(*l, x.(*ListNode))
  }

  var _ heap.Interface = (*ListNodes)(nil)

  func mergeKLists(lists []*ListNode) *ListNode {
      dummy := new(ListNode)
      pre := dummy
      hp := &ListNodes{}
      for i := 0; i < len(lists); i++ {
          if lists[i] != nil {
              heap.Push(hp, lists[i])
          }
      }
      for len(*hp) > 0 {
          top := heap.Pop(hp).(*ListNode)
          pre.Next = top
          pre = pre.Next
          if top.Next != nil {
              heap.Push(hp, top.Next)
          }
      }
      return dummy.Next
  }
#+end_src
