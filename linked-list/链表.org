#+title: 链表

* 876. 链表的中间结点

#+begin_src go
  func middleNode(head *ListNode) *ListNode {

      fast, slow := head, head

      for fast != nil && fast.Next != nil {
          slow = slow.Next
          fast = fast.Next.Next
      }

      return slow
  }
#+end_src

* 160. 相交链表

#+begin_src go
  func getIntersectionNode(headA, headB *ListNode) *ListNode {

      if headA == nil || headB == nil {
          return nil
      }

      p1, p2 := headA, headB

      for p1 != p2 {
          if p1 == nil {
              p1 = headB
          } else {
              p1 = p1.Next
          }

          if p2 == nil {
              p2 = headA
          } else {
              p2 = p2.Next
          }

      }

      return p1
  }
#+end_src

* 92. 反转链表 II

#+begin_src go
  func reverseBetween(head *ListNode, left int, right int) *ListNode {
      if left == 1 {
          return reverseN(head,right)
      }

      head.Next = reverseBetween(head.Next, left-1,right-1)

      return head
  }

  sus := nil

  func reverseN(head *ListNode, n int) *ListNode {

      if n == 1 {
          sus = head.Next
          return head
      }

      last := reverseN(head.Next, n-1)

      head.Next.Next = head
      head.Next = sus

      return last
  }
#+end_src

* 25. K 个一组翻转链表

#+begin_src go
  func reverseKGroup(head *ListNode, k int) *ListNode {
      if head == nil {
          return nil
      }

      a := head
      b := head
      for i := 0; i < k; i++ {
          if b == nil {
              return head
          }
          b = b.Next
      }

      newHead := reverse(a, b)

      a.Next = reverseKGroup(newHead, k)

      return newHead
  }

  func reverse(a *ListNode, b *ListNode) *ListNode {
      var pre *ListNode = nil

      nxt, cur := a, a

      for cur != b {
          nxt = cur.Next
          cur.Next = pre
          pre = cur
          cur = nxt
      }

      return pre
  }
#+end_src

#+begin_src go
  func reverse(a *ListNode, b *ListNode) (*ListNode, *ListNode) {
      pre := b.Next
      cur := a

      for pre != b {
          nxt := cur.Next
          cur.Next = pre
          pre = cur
          cur = nxt
      }

      return b, a
  }

  func reverseKGroup(head *ListNode, k int) *ListNode {
      hair := &ListNode{Next: head}

      pre := hair

      for head != nil {
          tail := pre

          for i := 0; i < k; i++ {
              tail = tail.Next
              if tail == nil {
                  return hair.Next
              }
          }

          nex := tail.Next
          head, tail := reverse(head, tail)
          pre.Next = head
          tail.Next = nex
          pre = tail
          head = tail.Next
      }

      return hair.Next
  }
#+end_src

* 234. 回文链表

#+begin_src go
  func isPalindrome(head *ListNode) bool {
      fast, slow := head, head

      for fast != nil && fast.Next != nil {
          fast = fast.Next.Next
          slow = slow.Next
      }

      if fast != nil {
          slow = slow.Next
      }

      left := head
      right := reverse(slow)

      for right != nil {
          if left.Val != right.Val {
              return false
          }

          right = right.Next
          left = left.Next
      }

      return true
  }

  func reverse(head *ListNode) *ListNode {
      var pre *ListNode = nil

      cur, nxt := head, head

      for cur != nil {
          nxt = cur.Next

          cur.Next = pre

          pre = cur

          cur = nxt
      }

      return pre
  }
#+end_src

思路：通过快慢指针确定链表中点，然后返回后段链表，进行比较
