#+title: 二分查找

* 思路

** 避免left+right太大导致溢出
#+begin_src go
mid := left + (right - left)/2
#+end_src

** 查找其中的某一个数
[0,2,3,4,6,9]中找3
left: 0
right: len(arr)-1
区间: [left,right]
return mid

** 寻找左侧边界
[0,2,3,3,5,6]找小于3的
left:0
right:len(arr)
区间:[left,right)
return left

** 寻找右侧边界
[0,2,3,3,5,6]找大于3的
left:0
right:len(arr)
区间:[left,right)
return left-1

* 704

#+begin_src go :main no
  package main
  
  import "fmt"
  
  func main() {
      n := []int{1, 2, 4, 5, 6, 9}
      inx := search(n, 2)
      fmt.Println(inx)
  }
  
  func search(nums []int, target int) int {
      left := 0
      right := len(nums) - 1
      for left <= right {
          middle := left + (right-left)/2
          if nums[middle] < target {
              left = middle + 1
          } else if nums[middle] > target {
              right = middle - 1
          } else if nums[middle] == target {
              return middle
          }
      }
  
      return -1
  }
#+end_src

#+RESULTS:
: 1

* 35.搜索插入位置

#+begin_src go :main no
  package main

  import "fmt"

  func main() {
      nums := []int{1, 3, 5, 6}
      fmt.Println(searchInsert(nums, 5))
  }

  func searchInsert(nums []int, target int) int {
      left, right := 0, len(nums)-1

      for left <= right {
          mid := (right-left)>>1 + left
          if nums[mid] < target {
              left = mid + 1
          } else if nums[mid] > target {
              right = mid - 1
          } else {
              return mid
          }
      }

      return left
  }
#+end_src

#+RESULTS:
: 2

* 34. 在排序数组中查找元素的第一个和最后一个位置

思路：两次两分法找第一个和最后一个 O(log n)

#+begin_src go :main no
    package main

    import "fmt"

    func main() {
        fmt.Println(searchRange([]int{2,2}, 3))
    }

    func searchRange(nums []int, target int) []int {
        start := findLeft(nums, target)
        if start == len(nums) || nums[start] != target {
            return []int{-1, -1}
        }
        end := findRight(nums, target)

        return []int{start, end}
    }

    func findLeft(nums []int, target int) int {
        left := 0
        right := len(nums) - 1

        for left <= right {
            mid := (right-left)>>1 + left
            if nums[mid] == target {
                right = mid - 1
            } else if nums[mid] > target {
                right = mid - 1
            } else if nums[mid] < target {
                left = mid + 1
            }
        }

        return left
    }

    func findRight(nums []int, target int) int {
        left := 0
        right := len(nums) - 1

        for left <= right {
            mid := (right-left)>>1 + left
            if nums[mid] == target {
                left = mid + 1
            } else if nums[mid] > target {
                right = mid - 1
            } else if nums[mid] < target {
                left = mid + 1
            }
        }

        return right
    }
#+end_src

#+RESULTS:
: [-1 -1]
