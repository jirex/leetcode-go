#+title: 移除元素

* 27. 移除元素

数组是连续的内存块，不能直接删除，否则复杂度就不是O(n)了
利用双指针，一快一慢来做

#+begin_src go :main no
  package main

  import "fmt"

  func main() {
      fmt.Println(removeElement([]int{2, 3, 4, 2, 5}, 2))
  }

  func removeElement(nums []int, val int) int {
      left := 0
      for _, v := range nums {
          if v != val {
              nums[left] = v
              left++
          }
      }
      return left
  }
#+end_src

#+RESULTS:
: 3

* 26. 删除有序数组中的重复项

#+begin_src go :main no
  package main

  import "fmt"

  func main() {
      fmt.Println(removeDuplicates([]int{1, 1, 2}))
  }

  func removeDuplicates(nums []int) int {
      n := len(nums)

      if n == 0 {
          return 0
      }

      slow := 1

      for fast := 1; fast < n; fast++ {
          if nums[fast] != nums[fast-1] {
              nums[slow] = nums[fast]
              slow++
          }
      }

      return slow

  }
#+end_src

#+RESULTS:
: 2

* 283. 移动零

#+begin_src go :main no
  package main

  import "fmt"

  func main() {
      moveZeroes([]int{0, 1, 0, 3, 12})
  }

  func moveZeroes(nums []int) {
      n := len(nums)

      slow := 0

      for fast := 0; fast < n; fast++ {
          if nums[fast] != 0 {
              s := nums[slow]
              nums[slow] = nums[fast]
              nums[fast] = s
              slow++
          }
      }
      fmt.Println(nums)
  }
#+end_src

#+RESULTS:
: [1 3 12 0 0]

需要把0交换到后面，而不是直接覆盖
