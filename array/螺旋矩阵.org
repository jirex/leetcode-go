#+title: 螺旋矩阵

* 59. 螺旋矩阵 II

思路：➡️ ⬇️ ⬅️ ⬆️ 螺旋

#+begin_src go :main no
  package main

  import "fmt"

  func main() {
      fmt.Println(generateMatrix(1))
  }

  func generateMatrix(n int) [][]int {
      top, bottom := 0, n-1
      left, right := 0, n-1

      num := 1
      tar := n * n

      mat := make([][]int, n)

      for i := 0; i < n; i++ {
          mat[i] = make([]int, n)
      }

      for num <= tar {
          for i := left; i <= right; i++ {
              mat[top][i] = num
              num++
          }
          top++
          for i := top; i <= bottom; i++ {
              mat[i][right] = num
              num++
          }
          right--
          for i := right; i >= left; i-- {
              mat[bottom][i] = num
              num++
          }
          bottom--
          for i := bottom; i >= top; i-- {
              mat[i][left] = num
              num++
          }
          left++
      }

      return mat
  }
#+end_src

#+RESULTS:
: [[1]]

* 54. 螺旋矩阵

#+begin_src go :main no
  package main

  import "fmt"

  func main() {
      fmt.Println(spiralOrder([][]int{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}, []int{9, 10, 11, 12}}))
  }

  func spiralOrder(matrix [][]int) []int {

      if len(matrix) == 0 {
          return []int{}
      }

      res := []int{}

      top, bot := 0, len(matrix)-1
      left, right := 0, len(matrix[0])-1

      for top <= bot && left <= right {
          for i := left; i <= right; i++ {
              res = append(res, matrix[top][i])
          }
          top++
          for i := top; i <= bot; i++ {
              res = append(res, matrix[i][right])
          }
          right--

          if top > bot || left > right {
              break
          }

          for i := right; i >= left; i-- {
              res = append(res, matrix[bot][i])
          }
          bot--

          for i := bot; i >= top; i-- {
              res = append(res, matrix[i][left])
          }
          left++
      }

      return res
  }
#+end_src

#+RESULTS:
: [1 2 3 4 8 12 11 10 9 5 6 7]
