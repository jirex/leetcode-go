#+title: 长度最小的子数组

* 209.长度最小的子数组

#+begin_src go :main no
  package main

  import (
      "fmt"
      "math"
  )

  func main() {
      fmt.Println(minSubArrayLen(7, []int{2, 3, 1, 2, 4, 3}))
  }

  func minSubArrayLen(target int, nums []int) int {
      n := len(nums)

      if n == 0 {
          return 0
      }

      s, e := 0, 0

      ans := math.MaxInt32

      sum := 0

      for e < n {
          sum += nums[e]

          for sum >= target {
              ans = min(ans, e-s+1)
              sum -= nums[s]
              s++
          }
          e++
      }

      if ans == math.MaxInt32 {
          return 0
      }

      return ans

  }

  func min(x, y int) int {
      if x < y {
          return x
      }
      return y
  }
#+end_src

#+RESULTS:
: 2

滑动窗口

* 904. 水果成篮

#+begin_src go :main no
  package main

  import "fmt"

  func main() {
      fmt.Println(totalFruit([]int{1, 2, 3, 2, 2}))
  }

  func totalFruit(fruits []int) int {
      f := map[int]int{}

      i, j, res, n := 0, 0, 0, len(fruits)

      for ; i < n; i++ {
          f[fruits[i]]++

          for j <= i && len(f) == 3 {
              f[fruits[j]]--
              if f[fruits[j]] == 0 {
                  delete(f, fruits[j])
              }
              j++
          }

          if res < i-j+1 {
              res = i - j + 1
          }
      }

      return res
  }
#+end_src

#+RESULTS:
: 4
